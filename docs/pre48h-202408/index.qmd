---
title: "Rによる天気予報風のグラフ表現"
subtitle: "3D棒グラフ＋地図の例"
author: "あきる（paithiov909）"
date: "2024-10-19"
date-format: long
lang: ja
format:
  aesthetic-revealjs:
    transition: fade
    slide-number: "c/t"
    overview: true
    chalkboard: false
    progress: true
    history: false
    theme: [default, custom.scss]
    include-in-header: header.html
    embed-resources: false
    link-external-newwindow: true
    pointer:
      color: "#FA7785"
      pointerSize: 24
revealjs-plugins:
  - pointer
knitr:
  opts_chunk:
    tidy: "styler"
    collapse: true
    comment: "#>"
---

## 誰？

:::{.aesthetic-windows-95-container-indent}
:::{.columns}

:::{.column width="30%"}
![](https://rawcdn.githack.com/paithiov909/paithiov909/f5342cd61b45e29c34b17fc11c9bc1766eacb441/avatar.jpg){.rounded-full}
:::

:::{.column width="70%"}
- あきる（[paithiov909](https://github.com/paithiov909)）というアカウントでインターネットしている
- Rパッケージをつくったりしている
  - [gibasa: A plain 'Rcpp' wrapper of 'MeCab'](https://github.com/paithiov909/gibasa/)
  - [audubon: An R package for Japanese text processing](https://github.com/paithiov909/audubon)
:::

:::
:::

## 今年の夏をふりかえる🎐

### バテてたら夏は終わっていた

:::{.aesthetic-windows-95-container-indent .fragment .fade-up}
[この夏にやったこと：]{.aesthetic-pepsi-cola-color}

- [WebR](https://docs.r-wasm.org/webr/latest/)を[Tauri v2](https://tauri.app/)アプリの中で使ってみる
  - [paithiov909/bnbkchagama: [WIP] Attempt to use WebR in Tauri v2 app](https://github.com/paithiov909/bnbkchagama)
- 冷房の効いた部屋でソシャゲ
:::

## 台風すごかった🌀

:::{layout-ncol=2}
![](tenki-1.webp){.fragment .fade-up}

![](tenki-2.webp){.fragment .fade-up}
:::

[画像：[台風10号まとめ　記録的な大雨・暴風　秋も台風の発生しやすい状況続く　動向に注意(気象予報士 吉田　友海 2024年09月02日) - 日本気象協会 tenki.jp](https://tenki.jp/forecaster/t_yoshida/2024/09/02/30414.html)]{style="font-size: 0.8em;"}

## 今日やること🎯

### こういう表現を[R]{.aesthetic-pepsi-red-color}でやりたい

![画像：https://x.com/wni_jp/status/1425815449036476420 から](E8mBv25UcAIIM-p.png)

## 具体的に🥅

### 積算降水量の3D棒グラフ＋地図を描く

:::{.aesthetic-windows-95-container-indent}
- [直近48時間の積算降水量（48時間降水量）のグラフ]{.aesthetic-pepsi-cola-color}
  - 3D表現（Z=0のXY平面上に地図を描き、Z軸方向に垂直に棒グラフを生やす）
  - 地図上で観測地点がある位置に棒グラフを描く
  - 棒は降水量で階級に分けて色をつける
:::

## どうやって❓

### 実はExcelでできるのだが…

:::{.aesthetic-windows-95-container-indent .fragment .fade-up}
- CSVデータが[気象庁｜最新の気象データ](https://www.data.jma.go.jp/stats/data/mdrr/pre_rct/index24_rct.html)あたりから取得できる
  - [jmastats](https://uribo.github.io/jmastats/index.html)パッケージで行けそうだが、ここでは手動でDLしておいた
- 地図の表現には[Mapbox GL JS](https://www.mapbox.com/)というライブラリを使う
  - Rからは[mapboxer](https://crazycapivara.github.io/mapboxer/index.html)というパッケージとして利用できる
  - ggplot2（[rayshader](https://github.com/tylermorganwall/rayshader)、[ggrgl](https://github.com/coolbutuseless/ggrgl)など？）やplotlyでも地図は描けるが、地図のZ軸方向に棒グラフを立てる表現が難しい
:::

## 降水量の色分け🚥

とりあえず適当に色分けする関数を用意しておく。
この関数の戻り値は`#RRGGBB`という形のカラーコード

```{r}
#| label: val2colcode
#| echo: true
val2colcode <- \(val) {
  dplyr::case_when(
    val >= 300 ~ "purple",
    dplyr::between(val, 200, 300) ~ "red",
    dplyr::between(val, 150, 200) ~ "yellow",
    dplyr::between(val, 100, 150) ~ "green",
    dplyr::between(val, 50, 100) ~ "blue",
    dplyr::between(val, 1, 50) ~ "cyan",
    .default = "gray"
  ) |>
    # 実際は7色だけ変換すればよいので、
    # この書き方は処理としては無駄が多い
    col2rgb() |>
    t() |>
    rgb(maxColorValue = 255)
}
```

## データの読み込み📖

`jmastats::stations`と結合して観測地点の座標を付けておく

```{r}
#| label: read-data
#| echo: true
#| code-fold: false
pre48h <-
  readr::read_csv(
    here::here("pre48h00_rct.csv"), # 9/1 13時更新分のデータ
    locale = readr::locale(encoding = "Shift_JIS") # Why are you using Shift_JIS??
  ) |>
  dplyr::select(`観測所番号`, `地点`, `現在値(mm)`) |>
  dplyr::rename_with(~ c("station_no", "station_name_label", "val")) |>
  dplyr::filter(!is.na(val)) |> # 欠測は削除する
  dplyr::left_join(
    dplyr::distinct(
      jmastats::stations,
      station_no,
      .keep_all = TRUE
    ),
    by = dplyr::join_by(station_no == station_no)
  ) |>
  dplyr::distinct(geometry, .keep_all = TRUE) # 位置で再度`distinct`する
```


## データの整形🔨

それぞれの観測地点に対応する棒グラフそのものを地物（POLYGON）として用意する。ここでは、観測地点を`sf::st_buffer`で広げる

```{r}
#| label: modify-data
#| echo: true
#| code-fold: false
pre48h <- pre48h |>
  dplyr::mutate(
    station_name_label = station_name_label,
    height = val * 600, # 地物の高さ。ここでは適当に`600`をかけておく
    colour = val2colcode(val), # さっきの色分け関数
    geometry = geometry,
    .keep = "used"
  ) |>
  sf::st_as_sf() |> # `sf`に変換しなおす
  sf::st_buffer(4000) # 棒グラフになるPOLYGONをつくる
```

## データの確認🔎

```{r}
#| label: check-data
#| echo: true
#| code-fold: false
pre48h
```

## ggplot2での地図表現🗾

これを素直にggplot2で描画すると、観測地点が全国各地に散らばっているようすを確認できる

```{r}
#| label: plot-stations
#| echo: true
#| code-fold: false
#| output-location: slide
library(ggplot2)

gp <- ggplot(pre48h) +
  geom_sf(aes(fill = factor(colour))) +
  theme_grey() +
  labs(title = "点の色は指定したものとは違うよ！")

gp
```

## 東海道新幹線のデータ🚅

[東海道新幹線が運休して大変だった](https://www3.nhk.or.jp/news/html/20240904/k10014571961000.html)らしいので、新幹線の路線図を重ねて描いてみたい。[jprailway](https://github.com/paithiov909/jprailway)という自作パッケージからデータを読み込んでおく

```{r jprailway}
#| label: read-jprailway
#| echo: true
#| code-fold: false
# 鉄道区間のsf (LINESTRING)
tkd_line <- jprailway::polylines |>
  dplyr::filter(name == "東海道新幹線")

# 駅のsf (POLYGON). ただし、ここでは代表点の座標を使う
tkd_station <- jprailway::stations |>
  dplyr::semi_join(
    jprailway::lines |>
      dplyr::filter(name == "東海道新幹線") |>
      tidyr::unnest(station_list, names_sep = "_"),
    by = c("code" = "station_list_code")
  ) |>
  dplyr::select(code, name, lat, lng) |>
  sf::st_drop_geometry()
```

## 東海道新幹線の路線図🚅

これは、こんな感じのデータ

```{r}
#| label: plot-jprailway
#| echo: true
#| code-fold: true
#| output-location: default
gp +
  geom_sf(data = tkd_line) +
  geom_point(aes(x = lng, y = lat), data = tkd_station) +
  ggrepel::geom_label_repel(aes(x = lng, y = lat, label = name), data = tkd_station) +
  coord_sf(xlim = c(135, 140), ylim = c(34.5, 35.8)) +
  labs(
    title = "東海道新幹線の停車駅",
    caption = paste(
      "出典：国土数値情報（鉄道データ）（国土交通省）",
      "https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N02-v2_3.html",
      sep = "\n"
    )
  )
```

## Mapbox GL JSとは🎁

```{r}
#| label: map-demo-1
#| echo: true
#| code-fold: true
library(mapboxer)

jpmap <-
  mapboxer::mapboxer(
    style = basemaps$Carto$voyager,
    center = c(140, 40),
    zoom = 3.2,
    pitch = 60.00,
    bearing = -12.0
  )
```

```{r}
#| label: map-demo-2
#| echo: true
#| code-fold: true
jpmap <- jpmap |>
  mapboxer::add_line_layer(
    id = "tkd_line",
    source = tkd_line |>
      mapboxer::as_mapbox_source(),
    line_color = "#000000",
    line_opacity = 0.8
  ) |>
  mapboxer::add_circle_layer(
    id = "tkd_station",
    source = tkd_station |>
      mapboxer::as_mapbox_source(),
    circle_color = "#000000",
    circle_opacity = 0.8
  ) |>
  mapboxer::add_tooltips(
    layer_id = "tkd_station",
    tooltip = "{{name}}"
  )
```

本来はこんな雰囲気で地図を描画するためのライブラリ

この地図ウィジェットは、左クリックでのドラッグでパン、右クリックでのドラッグで回転、ホイールで倍率の変更ができる

## Mapbox GL JSによる地図🎨

※ウィジェットの高さや幅が小さい場合、ページを再読込みしてみてください

```{r}
#| label: map-demo-3
#| echo: false
jpmap
```

## 高さがある地物を描く🗼

Mapbox GL JSには、地図にグラフを重ねることができる特別な機能があるわけではないが、[fill-extrusion](https://docs.mapbox.com/style-spec/reference/layers/#fill-extrusion)というレイヤーとして追加することで、高さがある地物を描画することができる

![↑本来はこういった表現をするための機能らしい](layer-fill-extrusion.6492bb9.960.png)

## 3D棒グラフ＋地図の表現📊

```{r}
#| label: extrusion-demo-1
#| echo: false
jpmap <-
  mapboxer::mapboxer(
    style = basemaps$Carto$voyager,
    center = c(140, 40),
    zoom = 3.2,
    pitch = 60.00,
    bearing = -12.0
  ) |>
  mapboxer::add_line_layer(
    id = "tkd_line",
    source = tkd_line |>
      mapboxer::as_mapbox_source(),
    line_color = "#000000",
    line_opacity = 0.8
  ) |>
  mapboxer::add_circle_layer(
    id = "tkd_station",
    source = tkd_station |>
      mapboxer::as_mapbox_source(),
    circle_color = "#000000",
    circle_opacity = 0.8
  ) |>
  mapboxer::add_tooltips(
    layer_id = "tkd_station",
    tooltip = "{{name}}"
  )
```

```{r}
#| label: extrusion-demo-2
#| echo: true
#| code-fold: true
jpmap <- jpmap |>
  mapboxer::add_source(
    id = "extrusion_src",
    source = pre48h |>
      mapboxer::as_mapbox_source()
  ) |>
  mapboxer::add_layer(
    list(
      id = "extrusion",
      type = "fill-extrusion",
      source = "extrusion_src",
      paint = list(
        "fill-extrusion-color" = list("get", "colour"),
        "fill-extrusion-height" = list("get", "height"),
        "fill-extrusion-base" = 0,
        "fill-extrusion-opacity" = 0.6
      )
    )
  )
```

```{r}
#| label: extrusion-demo-3
#| echo: true
#| code-fold: true
#| output-location: slide
jpmap |>
  mapboxer::add_tooltips(
    layer_id = "extrusion",
    tooltip = "観測所: {{station_name_label}}<br />降水量: {{val}} mm"
  )
```

[こちらのブログ記事](https://hirosaji.hatenablog.com/entry/2021/02/28/170637)のやり方を参考に、棒グラフの棒そのものを地物（POLYGON）としてあらかじめ用意したので、それを描画することで、3D棒グラフのような表現ができる

## まとめ🌂

### [R]{.aesthetic-pepsi-red-color}で天気予報風のグラフを描けた！！

:::{.aesthetic-windows-95-container-indent}
- ただし、Mapbox GL JSを使う場合は`fill-extrusion`での力技による
- Rで3D棒グラフ＋地図の表現はなかなか大変
  - もしかしたら[deckgl](https://github.com/crazycapivara/deckgl)の[ColumnLayer](https://deck.gl/docs/api-reference/layers/column-layer)を使うのが楽かもしれない
- でも、変な図を自力で描くと[R]{.aesthetic-pepsi-red-color}力の高まりを感じられる
:::

---

```{=html}
<div>
  <h2 class="aesthetic-25-transparent-color aesthetic-effect-text-glitch" data-glitch="Enjoy!!">Enjoy!!</h2>
</div>
```

```{r}
#| label: hexfont
#| echo: false
fonts <- hexfont::unifont(
  jp = TRUE,
  ucp = c(bittermelon::block2ucp("Mahjong Tiles"), bittermelon::str2ucp("Enjoy! "))
)
moji <- fonts[bittermelon::str2ucp("Enjoy!!")] |>
  bittermelon::bm_call(cbind)
tile <- fonts[bittermelon::str2ucp("🀈🀉🀊🀈🀉🀊🀈🀉🀊🀚🀚🀚🀋 🀋")] |>
  bittermelon::bm_call(cbind)

ra <- rbind(moji, tile) |>
  as.raster()
plot(ra)
```
